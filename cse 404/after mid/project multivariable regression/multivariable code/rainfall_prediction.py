# -*- coding: utf-8 -*-
"""rainfall prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11QhvFWifphuli1SAu9ttE2cZdFw6GF76
"""

from google.colab import files
#uploading dataset
uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

import numpy as np # Numpy Header
import pandas as pd #pandas Header

df = pd.read_csv('data_monthly_rainfall.csv') #read dataset

print(df.tail())

df.Station.unique()

df.StationIndex.unique()

#m=len(df.Year)#length of dataset
m=10000
print(m)

x1=df.Year
x2=df.StationIndex
x3=df.Month
y= df.Rainfall
print(x1.tail())
print(x2.head())
print(x3.head())
print(y.head())

#parapeter init

alpha = 0.01
#parameter initia initialization
theta = [1, 2, 8,10]
print(m)

# #normalize data , pre prosessing
# from sklearn import preprocessing
# preprocessing.normalize([x1])
# preprocessing.normalize([x2])
# preprocessing.normalize([x3])

J = 100
n = 0 # iteration number

for i in range(10000):
# while J>1.1:
  print("Iteration number: ",n+1)
  n = n+1
  # hypothesis function
  h = []
  print("Hypothesis function value is: h0(x)=theta_0+theta_1 * x")
  for i2 in range(m):
    temp = theta[0] + theta[1]*x1[i2] + theta[2]*x2[i2]+theta[3]*x3[i2]
    h.append(temp)
  print(h)
 

  # cost function
  error_sum = 0 
  print("Cost function is: j(theta)=1/(2*m) * i=1_samtionSign_m (h_theta_(x)-y)**2")

  for i3 in range(m):
    error_sum = error_sum + (h[i3] - y[i3])**2

  J = (1/(2*m))*error_sum
  print("\nCost function is:",J)

    # gradient descent
  print("\ngradient decent:")
  temp0 = 0
  for i4 in range(m):
    temp0 = temp0 + (h[i4] - y[i4])

  theta[0] = theta[0] - (alpha/m)*temp0

  temp1 = 0
  for i5 in range(m):
    temp1 = temp1 + (h[i5] - y[i5])*x1[i5]

  theta[1] = theta[1] - (alpha/m)*temp1

  temp1 = 0
  for i5 in range(m):
    temp1 = temp1 + (h[i5] - y[i5])*x2[i5]

  theta[2] = theta[2] - (alpha/m)*temp1
  
  temp1 = 0
  for i5 in range(m):
    temp1 = temp1 + (h[i5] - y[i5])*x3[i5]

  theta[3] = theta[3] - (alpha/m)*temp1

  print("New parameter value is: ",theta)

print("predicted hypothesis is:",h)